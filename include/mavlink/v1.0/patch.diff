diff --git a/common/mavlink_msg_debug_vect.h b/common/mavlink_msg_debug_vect.h
index d22ed77..48bb3cb 100644
--- a/common/mavlink_msg_debug_vect.h
+++ b/common/mavlink_msg_debug_vect.h
@@ -6,9 +6,9 @@
 MAVPACKED(
 typedef struct __mavlink_debug_vect_t {
  uint64_t time_usec; /*< Timestamp*/
- float x; /*< x*/
- float y; /*< y*/
- float z; /*< z*/
+ int32_t x; /*< x*/
+ int32_t y; /*< y*/
+ int32_t z; /*< z*/
  char name[10]; /*< Name*/
 }) mavlink_debug_vect_t;
 
@@ -61,14 +61,14 @@ typedef struct __mavlink_debug_vect_t {
  * @return length of the message in bytes (excluding serial stream start sign)
  */
 static inline uint16_t mavlink_msg_debug_vect_pack(uint8_t system_id, uint8_t component_id, mavlink_message_t* msg,
-                               const char *name, uint64_t time_usec, float x, float y, float z)
+                               const char *name, uint64_t time_usec, int32_t x, int32_t y, int32_t z)
 {
 #if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
     char buf[MAVLINK_MSG_ID_DEBUG_VECT_LEN];
     _mav_put_uint64_t(buf, 0, time_usec);
-    _mav_put_float(buf, 8, x);
-    _mav_put_float(buf, 12, y);
-    _mav_put_float(buf, 16, z);
+    _mav_put_int32_t(buf, 8, x);
+    _mav_put_int32_t(buf, 12, y);
+    _mav_put_int32_t(buf, 16, z);
     _mav_put_char_array(buf, 20, name, 10);
         memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_DEBUG_VECT_LEN);
 #else
@@ -100,14 +100,14 @@ static inline uint16_t mavlink_msg_debug_vect_pack(uint8_t system_id, uint8_t co
  */
 static inline uint16_t mavlink_msg_debug_vect_pack_chan(uint8_t system_id, uint8_t component_id, uint8_t chan,
                                mavlink_message_t* msg,
-                                   const char *name,uint64_t time_usec,float x,float y,float z)
+                                   const char *name,uint64_t time_usec,int32_t x, int32_t y, int32_t z)
 {
 #if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
     char buf[MAVLINK_MSG_ID_DEBUG_VECT_LEN];
     _mav_put_uint64_t(buf, 0, time_usec);
-    _mav_put_float(buf, 8, x);
-    _mav_put_float(buf, 12, y);
-    _mav_put_float(buf, 16, z);
+    _mav_put_int32_t(buf, 8, x);
+    _mav_put_int32_t(buf, 12, y);
+    _mav_put_int32_t(buf, 16, z);
     _mav_put_char_array(buf, 20, name, 10);
         memcpy(_MAV_PAYLOAD_NON_CONST(msg), buf, MAVLINK_MSG_ID_DEBUG_VECT_LEN);
 #else
@@ -163,14 +163,14 @@ static inline uint16_t mavlink_msg_debug_vect_encode_chan(uint8_t system_id, uin
  */
 #ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS
 
-static inline void mavlink_msg_debug_vect_send(mavlink_channel_t chan, const char *name, uint64_t time_usec, float x, float y, float z)
+static inline void mavlink_msg_debug_vect_send(mavlink_channel_t chan, const char *name, uint64_t time_usec, int32_t x, int32_t y, int32_t z)
 {
 #if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
     char buf[MAVLINK_MSG_ID_DEBUG_VECT_LEN];
     _mav_put_uint64_t(buf, 0, time_usec);
-    _mav_put_float(buf, 8, x);
-    _mav_put_float(buf, 12, y);
-    _mav_put_float(buf, 16, z);
+    _mav_put_int32_t(buf, 8, x);
+    _mav_put_int32_t(buf, 12, y);
+    _mav_put_int32_t(buf, 16, z);
     _mav_put_char_array(buf, 20, name, 10);
     _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_DEBUG_VECT, buf, MAVLINK_MSG_ID_DEBUG_VECT_MIN_LEN, MAVLINK_MSG_ID_DEBUG_VECT_LEN, MAVLINK_MSG_ID_DEBUG_VECT_CRC);
 #else
@@ -206,14 +206,14 @@ static inline void mavlink_msg_debug_vect_send_struct(mavlink_channel_t chan, co
   is usually the receive buffer for the channel, and allows a reply to an
   incoming message with minimum stack space usage.
  */
-static inline void mavlink_msg_debug_vect_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan,  const char *name, uint64_t time_usec, float x, float y, float z)
+static inline void mavlink_msg_debug_vect_send_buf(mavlink_message_t *msgbuf, mavlink_channel_t chan,  const char *name, uint64_t time_usec, int32_t x, int32_t y, int32_t z)
 {
 #if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
     char *buf = (char *)msgbuf;
     _mav_put_uint64_t(buf, 0, time_usec);
-    _mav_put_float(buf, 8, x);
-    _mav_put_float(buf, 12, y);
-    _mav_put_float(buf, 16, z);
+    _mav_put_int32_t(buf, 8, x);
+    _mav_put_int32_t(buf, 12, y);
+    _mav_put_int32_t(buf, 16, z);
     _mav_put_char_array(buf, 20, name, 10);
     _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_DEBUG_VECT, buf, MAVLINK_MSG_ID_DEBUG_VECT_MIN_LEN, MAVLINK_MSG_ID_DEBUG_VECT_LEN, MAVLINK_MSG_ID_DEBUG_VECT_CRC);
 #else
@@ -258,9 +258,9 @@ static inline uint64_t mavlink_msg_debug_vect_get_time_usec(const mavlink_messag
  *
  * @return x
  */
-static inline float mavlink_msg_debug_vect_get_x(const mavlink_message_t* msg)
+static inline int32_t mavlink_msg_debug_vect_get_x(const mavlink_message_t* msg)
 {
-    return _MAV_RETURN_float(msg,  8);
+    return _MAV_RETURN_int32_t(msg,  8);
 }
 
 /**
@@ -268,9 +268,9 @@ static inline float mavlink_msg_debug_vect_get_x(const mavlink_message_t* msg)
  *
  * @return y
  */
-static inline float mavlink_msg_debug_vect_get_y(const mavlink_message_t* msg)
+static inline int32_t mavlink_msg_debug_vect_get_y(const mavlink_message_t* msg)
 {
-    return _MAV_RETURN_float(msg,  12);
+    return _MAV_RETURN_int32_t(msg,  12);
 }
 
 /**
@@ -278,9 +278,9 @@ static inline float mavlink_msg_debug_vect_get_y(const mavlink_message_t* msg)
  *
  * @return z
  */
-static inline float mavlink_msg_debug_vect_get_z(const mavlink_message_t* msg)
+static inline int32_t mavlink_msg_debug_vect_get_z(const mavlink_message_t* msg)
 {
-    return _MAV_RETURN_float(msg,  16);
+    return _MAV_RETURN_int32_t(msg,  16);
 }
 
 /**
